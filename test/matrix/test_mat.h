// Header file to include the necessary functions but most importantly to include a few standard matrices so I don't have to
// keep generating new ones for every test!!!
#pragma once

#include "ejovo_matrix.h"
#include "ejovo_print.h"
#include <assert.h>
#include <stdbool.h>

Matrix *get_wide() {

    Matrix *wide = Matrix_from(
        (double[]) {0.000000, 3.000000, 5.000000, 9.000000, 2.000000, 2.000000, 3.000000, 6.000000, 9.000000, 10.000000, 6.000000, 1.000000, 5.000000, 8.000000, 0.000000, 2.000000, 10.000000, 8.000000, 10.000000, 5.000000, 6.000000, 3.000000, 2.000000, 0.000000, 0.000000, 6.000000, 4.000000, 2.000000, 7.000000, 10.000000, 2.000000, 10.000000, 3.000000, 7.000000, 7.000000, 6.000000, 10.000000, 9.000000, 3.000000, 4.000000, 0.000000, 9.000000, 4.000000, 9.000000, 2.000000, 7.000000, 5.000000, 7.000000, 6.000000, 9.000000}
        , 5, 10);

    return wide;

}

Matrix *get_tall() {

    Matrix *tall = Matrix_from(
        (double[]) {7.000000, 2.000000, 2.000000, 1.000000, 3.000000, 3.000000, 1.000000, 9.000000, 8.000000, 5.000000, 9.000000, 2.000000, 9.000000, 3.000000, 9.000000, 4.000000, 2.000000, 9.000000, 1.000000, 8.000000, 1.000000, 5.000000, 7.000000, 1.000000, 10.000000, 6.000000, 4.000000, 0.000000, 7.000000, 6.000000, 9.000000, 2.000000}
        , 8, 4);

    return tall;

}

Matrix *get_square() {

    Matrix *sq = Matrix_from(
        (double[]) {2.000000, 8.000000, 7.000000, 7.000000, 10.000000, 2.000000, 8.000000, 3.000000, 3.000000, 1.000000, 1.000000, 4.000000, 6.000000, 9.000000, 2.000000, 1.000000, 7.000000, 0.000000, 6.000000, 2.000000, 6.000000, 4.000000, 1.000000, 4.000000, 9.000000, 8.000000, 8.000000, 1.000000, 6.000000, 10.000000, 3.000000, 3.000000, 9.000000, 8.000000, 9.000000, 1.000000, 6.000000, 7.000000, 6.000000, 7.000000, 2.000000, 5.000000, 9.000000, 3.000000, 2.000000, 9.000000, 2.000000, 9.000000, 8.000000, 8.000000, 0.000000, 8.000000, 3.000000, 5.000000, 5.000000, 3.000000, 9.000000, 7.000000, 7.000000, 7.000000, 6.000000, 2.000000, 1.000000, 6.000000}
        , 8, 8);

    return sq;
}

Matrix *get_A() {

    Matrix *A = Matrix_from((double[]) {1, 2, 3, 4, 5, 6}, 2, 3);
    return A;

}

Matrix *get_B() {

    Matrix *B = Matrix_from((double[]) {10, 12, 14, 16, 18, 20}, 3, 2);
    return B;
}